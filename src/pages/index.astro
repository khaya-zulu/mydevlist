---
import Layout from '~/layouts/layout.astro';
import ThreeDLayout from "~/components/three-d-layour.astro"
import Image from "~/components/img.astro"
import Search from "~/layouts/search.astro"

// const pages = await db.select({ id: Page.id, url: Page.url, screenshotKey: Page.screenshotKey, description: Page.description, clicks: count(Click.id) })
// 	.from(Page)
// 	.innerJoin(Click, eq(Page.id, Click.pageId))
// 	.groupBy(Page.id)

const pages = [
	{
		id: "1",
		url: "gal.hagever.com",
		screenshotKey: "https://images.unsplash.com/photo-1725161834485-58be3227a34c?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHw3fHx8ZW58MHx8fHx8",
		description: "A personal blog by Gal Schlezinger. Thoughts. Code. Whatever.",
		clicks: 2
	},
	{
		id: "2",
		url: 'joshwcomeau.com',
		screenshotKey: "https://images.unsplash.com/photo-1724747891638-68862b7b3165?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxOHx8fGVufDB8fHx8fA%3D%3D",
		description: "Friendly tutorials for developers. Focus on React, CSS, Animation, and more!",
		clicks: 5
	},
	{
		id: "3",
		url: 'jonasgalvez.com.br',
		screenshotKey: "https://images.unsplash.com/photo-1724747891638-68862b7b3165?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxOHx8fGVufDB8fHx8fA%3D%3D",
		description: "Friendly tutorials for developers. Focus on React, CSS, Animation, and more!",
		clicks: 5
	}
]
---

<!-- todo: when a user hovers on a cover image, update the background image of the text.  -->
<Layout title="Welcome to Astro.">
	<main class="max-w-6xl mx-auto py-10">
		<div class="mb-16 mt-10">
			<h1 class="text-xl font-bold bg-gradient-to-tr from-black to-cyan-700 bg-clip-text text-transparent max-w-2xl mb-4">
				Hi there <span class="text-black">ðŸ‘‹</span>, My name <i class="underline decoration-wavy">Khaya</i>
				<br /><br>
				For the past three years I've been building <br> up a list of engineers, this is it. Please
				find
			</h1>
			<Search />
		</div>

		<div class="grid grid-cols-4 gap-8 mt-8">
			{
				[...pages, ...pages].map((p) => (
					<ThreeDLayout>
						<div class="flex flex-col h-full">
							<div class="p-2 bg-zinc-800 rounded-lg shadow-inner">
								<Image src={p.screenshotKey} alt={`${p.url} screenshot`} />
							</div>

							<div class="p-2 flex flex-col flex-1 justify-between">
								<div>
									<div class="flex items-center gap-4 justify-between">
										<div class="shadow-inner rounded-md my-2 text-zinc-50 py-1 px-2 text-sm border-2 border-zinc-800 inline-flex bg-gradient-to-tr from-zinc-800 to-zinc-700">{p.url}</div>
										<div class="flex gap-3 ml-2">
											<div class="h-2 w-4 bg-yellow-200 rounded-sm" />
											<div class="h-2 w-4 bg-green-200 rounded-sm" />
										</div>
									</div>

									<div class="text-sm mb-8 text-zinc-50">
										{p.description}
									</div>
								</div>

								<button class="flex gap-2 items-center" onclick={`onClick(${p.id}, '${p.url}')`}>
									<div class="p-1 rounded-full bg-gradient-to-tr from-zinc-800 to-zinc-700 shadow-inner border-2 border-zinc-800">
										<div class="p-2 bg-zinc-200 rounded-full shadow-inner">
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
												<path stroke-linecap="round" stroke-linejoin="round" d="M15.042 21.672L13.684 16.6m0 0l-2.51 2.225.569-9.47 5.227 7.917-3.286-.672zM12 2.25V4.5m5.834.166l-1.591 1.591M20.25 10.5H18M7.757 14.743l-1.59 1.59M6 10.5H3.75m4.007-4.243l-1.59-1.59" />
											</svg>
										</div>										
									</div>
									<div id={`${p.id}`} class="text-sm opacity-40 text-white group-hover:opacity-100 duration-300 transition-opacity">
										{p.clicks} clicks
									</div>
								</button>
							</div>
						</div>
					</ThreeDLayout>
				))
			}
		</div>
	</main>
</Layout>

<script>
	(window as any as { onClick: (pageId: string, url: string) => void }).onClick = async (pageId, url) => {
		fetch(`/click/${pageId}`).then(async (res) => {
			const data = await res.json()
			if (res.status === 200) {
				const el = document.getElementById(pageId)
				if (el) el.innerHTML = `${data.count} clicks`
			}
		})
		window.open(url, "_blank", "noopener,noreferrer")
	}
</script>
